import { useState, useEffect } from 'react';
import { useResourceContext } from '../core';
import { useRecordContext } from '../controller';
import { useGetPathForRecordCallback } from './useGetPathForRecordCallback';
/**
 * Get a path for a record, based on the current resource and the link type.
 *
 * Accepted link types are 'edit', 'show', a route string, false, or a function returning one of these types.
 *
 * @example
 * // basic usage (leverages RecordContext, ResourceContext and ResourceDefinitionContext)
 * const EditLink = () => {
 *   const path = useGetRouteForRecord();
 *   return path ? <Link to={path}>Edit</Link> : null;
 * };
 *
 * // controlled mode
 * const EditLink = ({ record, resource }) => {
 *    const path = useGetRouteForRecord({ record, resource, link: 'edit' });
 *    return path ? <Link to={path}>Edit</Link> : null;
 * };
 *
 * // the link option can be a function
 * const EditLink = ({ record, resource }) => {
 *   const path = useGetRouteForRecord({ record, resource, link: (record, resource) => record.canEdit ? 'edit' : false });
 *   return path ? <Link to={path}>Edit</Link> : null;
 * };
 *
 * // the link option can be a function returning a promise
 * const EditLink = ({ record, resource }) => {
 *   const path = useGetRouteForRecord({ record, resource, link: async (record, resource) => {
 *     const canEdit = await canEditRecord(record, resource);
 *     return canEdit ? 'edit' : false;
 *   }});
 *   return path ? <Link to={path}>Edit</Link> : null;
 * };
 */
export var useGetPathForRecord = function (options) {
    var link = (options || {}).link;
    var record = useRecordContext(options);
    var resource = useResourceContext(options);
    if (!resource) {
        throw new Error('Cannot generate a link for a record without a resource. You must use useGetPathForRecord within a ResourceContextProvider, or pass a resource prop.');
    }
    var getPathForRecord = useGetPathForRecordCallback(options);
    // we initialize the path with the link value
    var _a = useState(function () {
        getPathForRecord({
            record: record,
            resource: resource,
            link: link,
        }).then(function (resolvedLink) {
            if (resolvedLink === false) {
                // already set to false by default
                return;
            }
            // update the path when the promise resolves
            setPath(resolvedLink);
        });
        return false;
    }), path = _a[0], setPath = _a[1];
    // update the path if the record changes
    useEffect(function () {
        getPathForRecord({
            record: record,
            resource: resource,
            link: link,
        }).then(function (resolvedLink) {
            // update the path when the promise resolves
            setPath(resolvedLink);
        });
    }, [getPathForRecord, link, record, resource]);
    return path;
};
//# sourceMappingURL=useGetPathForRecord.js.map